const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode=model.startChat({
      generationConfig:CodeGenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate Todo App : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   \n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Beautiful Todo App\",\n  \"explanation\": \"This React project creates a beautiful and fully functional Todo application using Tailwind CSS for styling and icons from lucide-react. The project is structured with components organized into separate folders for better maintainability. It uses React hooks for managing state and functionality. This application provides a user-friendly interface for managing tasks, including adding, editing, deleting, and marking tasks as complete. Emojis are integrated to enhance user engagement and the overall design is crafted to be aesthetically pleasing, offering a production-ready experience.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList/TodoList';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"min-h-screen bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 flex items-center justify-center\\\">\\n       <div className=\\\"bg-white shadow-2xl rounded-2xl p-8 m-4 w-full max-w-xl\\\">\\n        <h1 className=\\\"text-3xl font-bold text-gray-800 mb-6 text-center\\\">My Todo App ðŸš€</h1>\\n        <TodoList />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TodoList/TodoList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { Plus, Edit, Trash, Check, X, Clock } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst TodoList = () => {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    return savedTodos ? JSON.parse(savedTodos) : [];\\n  });\\n  const [newTodo, setNewTodo] = useState('');\\n  const [editingTodoId, setEditingTodoId] = useState(null);\\n  const [editingTodoText, setEditingTodoText] = useState('');\\n\\n    useEffect(() => {\\n        localStorage.setItem('todos', JSON.stringify(todos));\\n    }, [todos]);\\n\\n  const handleAddTodo = () => {\\n    if (newTodo.trim() === '') return;\\n    const newTodoItem = {\\n      id: Date.now(),\\n      text: newTodo,\\n      completed: false,\\n      createdAt: new Date(),\\n    };\\n    setTodos([...todos, newTodoItem]);\\n    setNewTodo('');\\n  };\\n\\n  const handleCompleteTodo = (id) => {\\n    setTodos(todos.map(todo =>\\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n    ));\\n  };\\n\\n  const handleDeleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n  const handleStartEditTodo = (todo) => {\\n    setEditingTodoId(todo.id);\\n    setEditingTodoText(todo.text);\\n  };\\n\\n  const handleCancelEdit = () => {\\n      setEditingTodoId(null);\\n      setEditingTodoText('')\\n    }\\n\\n  const handleSaveEditTodo = (id) => {\\n      setTodos(todos.map(todo =>\\n        todo.id === id ? { ...todo, text: editingTodoText } : todo\\n      ));\\n      setEditingTodoId(null);\\n    setEditingTodoText('')\\n  };\\n\\n\\n\\n  return (\\n    <div className=\\\"\\\">\\n      <div className=\\\"mb-4 flex items-center space-x-2\\\">\\n        <input\\n          type=\\\"text\\\"\\n          placeholder=\\\"Add a new todo...\\\"        \\n          className=\\\"border p-2 rounded w-full focus:ring-2 focus:ring-purple-300 focus:border-transparent\\\"\\n          value={newTodo}\\n          onChange={(e) => setNewTodo(e.target.value)}\\n        />\\n        <button onClick={handleAddTodo} className=\\\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n          <Plus size={20}/>\\n        </button>\\n      </div>\\n      <ul>\\n        {todos.map(todo => (\\n          <li key={todo.id} className=\\\"bg-gray-50 shadow rounded mb-2 p-3 flex justify-between items-center hover:bg-gray-100 transition-all duration-200\\\">\\n            <div className=\\\"flex items-center space-x-3\\\">\\n              <button onClick={() => handleCompleteTodo(todo.id)} className={`rounded-full border-2 p-1  ${todo.completed ? 'bg-green-500 border-green-500' : 'border-gray-400 hover:border-purple-500'}`}>\\n                {todo.completed && <Check size={18} className=\\\"text-white\\\" />}\\n              </button>\\n             {\\n              editingTodoId === todo.id ? (\\n                <input type=\\\"text\\\" \\n                className=\\\"border p-1 rounded focus:ring-2 focus:ring-purple-300 focus:border-transparent\\\"\\n                  value={editingTodoText}\\n                  onChange={(e) => setEditingTodoText(e.target.value)}\\n                />\\n              ) : (\\n                <span className={`${todo.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>{todo.text}</span>\\n              )\\n            }\\n             </div>\\n              <div className='flex items-center space-x-2 '>\\n              <span className=\\\"text-xs text-gray-500 flex items-center\\\"><Clock size={14} className=\\\"mr-1\\\" /> {format(todo.createdAt, 'MMM dd, yyyy hh:mm a')}</span>\\n                 {\\n                    editingTodoId === todo.id ? (\\n                      <div className='flex items-center space-x-2'>\\n                       <button onClick={() => handleSaveEditTodo(todo.id)} className=\\\"text-green-500 hover:text-green-700 focus:outline-none\\\"><Check size={20}/></button>\\n                       <button onClick={() => handleCancelEdit()} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\"><X size={20}/></button>\\n                      </div>\\n                    ) : (\\n                       <div className='flex items-center space-x-2'>\\n                      <button onClick={() => handleStartEditTodo(todo)} className=\\\"text-blue-500 hover:text-blue-700 focus:outline-none\\\"><Edit size={18}/></button>\\n                    <button onClick={() => handleDeleteTodo(todo.id)} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\"><Trash size={18}/></button>\\n                      </div>\\n                    )\\n                  }\\n\\n              </div>\\n          </li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n};\\n\\nexport default TodoList;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList/TodoList.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());